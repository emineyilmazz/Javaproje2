/*
JoinRoom metotu, kullanıcının bir odaya katıldığında çağrılır. Bir mesaj alır ve bu mesajı sohbet listesine ekler.
Sohbet listesini günceller ve  son mesaja odaklanır.
ReceiveMessage metot, bir mesajın alındığında çağrılır. Bir ArrayList alır, bu liste içinde kullanıcının adını ve mesajın metnini içerir.
Bu bilgileri sohbet listesine ekler, sohbet listesini günceller ve son mesaja odaklanır.
sendBtnActionPerformed metot, send butonuna tıklanınca çağrılır. Bir mesaj oluşturur, bu mesajın içeriğine metin alanındaki 
metni atar ve mesajı sunucuya gönderir. Gönderilen mesajı sohbet listesine ekler, sohbet listesini günceller ve son mesaja odaklanır.
msgTextField, mesaj metnini girmek için bir alanıdır.
chatLis, sohbet mesajlarının görüntülendiği bir listedir.
Bu kod, sohbet client uygulamasının kullanıcı arayüzünü gösteriyor ve kullanıcının sohbet odasına katılmasını, mesaj gönderip almasını 
ve bunları arayüzde görüntülemesini sağlamaktasdır.
*/



package chatClient;



import Message.Message;
import Message.Message.Message_Type;
import java.util.ArrayList;
import javax.swing.DefaultListModel;

public class ChatFrame extends javax.swing.JFrame {

    public static ChatFrame chatFrame;
    DefaultListModel dlm;

    public ChatFrame() {
        initComponents();
        chatFrame = this;
        dlm = new DefaultListModel();
    }

    public ChatFrame(String roomName) {
        initComponents();
        chatFrame = this;
        roomNameLabel.setText("Room " + roomName);
        dlm = new DefaultListModel();
    }

    public void JoinRoom(String msg) {
        dlm.addElement(msg.toString() + " has joined to chat...");
        chatList.setModel(dlm);

        int size = chatList.getModel().getSize();
        chatList.ensureIndexIsVisible(size - 1);
    }

    public void ReceiveMessage(ArrayList<String> msg) {
        String name = msg.get(0);
        String text = msg.get(1);

        dlm.addElement(name + ": " + text);
        chatList.setModel(dlm);

        int size = chatList.getModel().getSize();
        chatList.ensureIndexIsVisible(size - 1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        msgTextField = new javax.swing.JTextField();
        sendBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        chatList = new javax.swing.JList<>();
        roomNameLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        sendBtn.setText("Send");
        sendBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendBtnActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(chatList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(roomNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(msgTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sendBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(roomNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(sendBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                    .addComponent(msgTextField))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendBtnActionPerformed
        // TODO add your handling code here:
        Message msg = new Message(Message_Type.RoomMessage);
        msg.content = msgTextField.getText();
        Client.Send(msg);

        dlm.addElement(Client.userName + ": " + msgTextField.getText());
        chatList.setModel(dlm);

        int size = chatList.getModel().getSize();
        chatList.ensureIndexIsVisible(size - 1);
    }//GEN-LAST:event_sendBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChatFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> chatList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField msgTextField;
    private javax.swing.JLabel roomNameLabel;
    private javax.swing.JButton sendBtn;
    // End of variables declaration//GEN-END:variables
}
